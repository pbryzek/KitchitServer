CREATE TABLE KitchitUser(
  id serial primary key,
  created timestamp default current_timestamp,
  modified timestamp default current_timestamp,
  email TEXT NOT NULL, 
  password TEXT NOT NULL,
  first TEXT NOT NULL,
  last TEXT NOT NULL
);

CREATE TABLE Events (
  id serial primary key,
  created timestamp default current_timestamp,
  modified timestamp default current_timestamp,
  user_id INT NULL,
  event_time timestamp NOT NULL,
  host_name TEXT NOT NULL, 
  host_latitude float NOT NULL,
  host_longitude float NOT NULL,

  FOREIGN KEY (user_id) REFERENCES KitchitUser(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
); 

CREATE TABLE CurrentLocation (
  id serial primary key,  
  created timestamp default current_timestamp,
  modified timestamp default current_timestamp,
  user_id INT NULL UNIQUE,
  host_latitude float NOT NULL,
  host_longitude float NOT NULL,  

  FOREIGN KEY (user_id) REFERENCES KitchitUser(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE

);

CREATE TABLE Checkin (
  id serial primary key,  
  created timestamp default current_timestamp,
  modified timestamp default current_timestamp,
  user_id INT NOT NULL,
  event_id INT NOT NULL,

  FOREIGN KEY (user_id) REFERENCES KitchitUser(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE,

  FOREIGN KEY (event_id) REFERENCES Events(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE,

  unique (event_id, user_id)
);

CREATE OR REPLACE FUNCTION update_modified_column()	
RETURNS TRIGGER AS $$
BEGIN
    NEW.modified = now();
    RETURN NEW;	
END;
$$ language 'plpgsql';

CREATE TRIGGER update_kitchit_modtime BEFORE UPDATE ON kitchit FOR EACH ROW EXECUTE PROCEDURE  update_modified_column();

